[
{
	"uri": "/lectures/before/",
	"title": "Before the first lecture: installation and setup",
	"tags": [],
	"description": "",
	"content": " 1. Installing R and RStudio 1.1 Installing R We start with installing the latest version of R (3.6.1 as of September 9). R itself is similar to an engine and chassis of a car, that is a bare minimum so that you can start driving. You need to follow steps below:\n Visit https://cran.r-project.org and click on \u0026ldquo;Download R for \u0026hellip;\u0026rdquo;, where \u0026hellip; coresponds to your operating system. Depending on the operating system:  For Mac: download \u0026ldquo;R-3.6.1.pkg\u0026rdquo;, open this file, and install R For Widnows: click on \u0026ldquo;base\u0026rdquo;, download the .exe file, open it, and install R    Check yourself: Open R application. In the console you will see something as follows:\nR version 3.6.1 (2019-07-05) -- \u0026quot;Action of the Toes\u0026quot; Copyright (C) 2019 The R Foundation for Statistical Computing Platform: x86_64-apple-darwin15.6.0 (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type 'license()' or 'licence()' for distribution details. Natural language support but running in an English locale R is a collaborative project with many contributors. Type 'contributors()' for more information and 'citation()' on how to cite R or R packages in publications. Type 'demo()' for some demos, 'help()' for on-line help, or 'help.start()' for an HTML browser interface to help. Type 'q()' to quit R.  Note: If you are a Mac user and you see similar to the following warning messages during the startup\nDuring startup - Warning messages: 1: Setting LC_CTYPE failed, using \u0026quot;C\u0026quot; 2: Setting LC_COLLATE failed, using \u0026quot;C\u0026quot; 3: Setting LC_TIME failed, using \u0026quot;C\u0026quot; 4: Setting LC_MESSAGES failed, using \u0026quot;C\u0026quot; 5: Setting LC_PAPER failed, using \u0026quot;C\u0026quot; [R.app GUI 1.50 (6126) x86_64-apple-darwin9.8.0] WARNING: You're using a non-UTF8 locale, therefore only ASCII characters will work. Please read R for Mac OS X FAQ (see Help) section 9 and adjust your system preferences accordingly. [History restored from /Users/nemo/.Rapp.history]  you need to follow steps below:\n Open Terminal Write or paste in: defaults write org.R-project.R force.LANG en_US.UTF-8 Close Terminal  1.2 Installing RStudio Caution: Install RStudio only once R has been installed and only in this order.\nRStudio is an integrated development environment for R. Following up our exaple of the car, RStudio is similar to additional parts, such as exterior, interior, air conditioner, etc. You can drive the vehicle withour them, but life is much simpler and pleasent if they are present.\nWe will install the free version:\n Visit https://www.rstudio.com/products/rstudio/download/#download. Click on the respective version of your operating system, this will start the downloading process. Open the file and install.  Note: To improve the quality of the code, we will limit the length of lines to 80 symbols. To display the margin in RStudio sourse editor:\n Open RStudio Go to Tools -\u0026gt; Global Options… -\u0026gt; Code -\u0026gt; Display Click on “Show margin” Set \u0026ldquo;Margin column\u0026rdquo; to 80  Check yourself: Open RStudio application. In the console you will see something as follows:\nR version 3.6.1 (2019-07-05) -- \u0026quot;Action of the Toes\u0026quot; Copyright (C) 2019 The R Foundation for Statistical Computing Platform: x86_64-apple-darwin15.6.0 (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type 'license()' or 'licence()' for distribution details. Natural language support but running in an English locale R is a collaborative project with many contributors. Type 'contributors()' for more information and 'citation()' on how to cite R or R packages in publications. Type 'demo()' for some demos, 'help()' for on-line help, or 'help.start()' for an HTML browser interface to help. Type 'q()' to quit R.  1.3 Installing packages Note: Packages can be installed from both R and RStudio. The installed RStudio is not required.\nIn this course we will utilize a number of packages. If a package is published on CRAN, then the procedure of installing the package is straightforward:\n Open RStudio In the console execute the following command: install.packages(\u0026quot;package_name\u0026quot;), where package_name is the name of the desired package (e.g., \u0026ldquo;ggplot2\u0026rdquo;).  Several packages, however, would have only development version (or simply be not published on CRAN). Then, knowing the GitHub link to the repo, one could follow the steps below:\n Install devtools package (if it has not yet been installed) as usual (as shown above). Type devtools::install_github(\u0026quot;username/repo\u0026quot;) and hit the Enter/return key to execute the command in the console, where username is the username of the owner of the repo, and repo is the name of the repo.  For homework you will use the following packages from CRAN: \u0026quot;tidyverse\u0026quot;, \u0026quot;rworldmap\u0026quot;, \u0026quot;rworldxtra\u0026quot;, \u0026quot;ggmap\u0026quot;, \u0026quot;devtools\u0026quot;, \u0026quot;rmarkdown\u0026quot;, \u0026quot;knitr\u0026quot;, \u0026quot;xml2\u0026quot;, \u0026quot;rvest\u0026quot;, \u0026quot;magrittr\u0026quot;, \u0026quot;shiny\u0026quot;, \u0026quot;roxygen2\u0026quot;, and \u0026quot;miniUI\u0026quot;.\nNote: Before installing the \u0026quot;devtools\u0026quot; package, you will most certainly need to install building tools. For Windows, you need to install RTools. For Mac, you need to install XCode. Check this link for more details.\nInstead of installing these packages one by one, you can pass the vector of characters packages\u0026rsquo; names:\npkgs = c(\u0026quot;tidyverse\u0026quot;, \u0026quot;rworldmap\u0026quot;, \u0026quot;rworldxtra\u0026quot;, \u0026quot;ggmap\u0026quot;, \u0026quot;devtools\u0026quot;, \u0026quot;rmarkdown\u0026quot;, \u0026quot;knitr\u0026quot;, \u0026quot;xml2\u0026quot;, \u0026quot;rvest\u0026quot;, \u0026quot;magrittr\u0026quot;, \u0026quot;shiny\u0026quot;, \u0026quot;roxygen2\u0026quot;,\u0026quot;miniUI\u0026quot;) install.packages(pkgs = pkgs)  Additionally, one has to install packages from \u0026quot;ptdspkg\u0026quot; repo of SMAC-Group GitHub user, and Hadley Wickham\u0026rsquo;s \u0026quot;emo\u0026quot; package (i.e., by using devtools::install_github(\u0026quot;SMAC-Group/ptdspkg\u0026quot;) and devtools::install_github(\u0026quot;hadley/emo\u0026quot;), respectively).\nNote: Packages should be installed only once. No needs to install them every time when you want to use them (it is the same as installing Skype every time you want to call your parents). That is why it is better to do it in concole, not in source editor.\nCheck yourself: To check if a package was installed successfully, use \u0026quot;name_of_package\u0026quot; %in% rownames(installed.packages()).\n2. Installing and setting up Git, GitHub, and GitHub Desktop In this section we will install a distributed version-control system Git, register a new user at GitHub and connect them together.\n2.1 Installing and setting up Git  Download Git installer for Mac or for Windows. Open the downloaded file and follow the proposed steps Configure your Git to let it know who you are:\ngit config --global user.name \u0026quot;YOUR FULL NAME\u0026quot; git config --global user.email \u0026quot;YOUR EMAIL ADDRESS\u0026quot;  Please do use your UNIL email address, so that we can exploit GitHub Student Developer Pack afterwards.\n  Check yourself: Type in Terminal: git --version. It should display Git version, (e.g., git version 2.22.0)\nNote: For Mac users, Git could be already preinstalled. However, Apple does not provide the latest version, that is why we have just installed the latest Git. If the previous command shows git version 2.7.0 (Apple Git-66), we will need to change the path of the executable command git. To do so execute the following commands in Terminal:\ncd ~ touch .bash_profile echo 'export PATH=\u0026quot;/usr/local/bin:${PATH}\u0026quot;' \u0026gt;\u0026gt; .bash_profile source .bash_profile  Note: Sometimes RStudio has a wrong path to git command. To check it, go to Tools -\u0026gt; Global Options\u0026hellip; -\u0026gt; Git/SVN, check the box \u0026ldquo;Enable version control interface for RStudio projects\u0026rdquo;. Then, \u0026ldquo;Git executable\u0026rdquo; and which git/where git (for Mac/Windows users, respectively) should be the same. Otherwise, copy the path from Terminal to RStudio.\nTo check if it worked, type which git in Terminal and expect to see /usr/local/bin/git.\n2.2 Registering a GitHub account  Visit https://github.com and fill in the fields. Please use the same email (i.e., UNIL email) address and short username without special symbols like hyphen, periods, etc. Furthermore, use free plan. Set up an SSH connection follow steps at https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent and https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account\n Set up a GitHub Student Developer Pack by visiting https://education.github.com/discount_requests/new\n  2.3 Installing and setting up GitHub Desktop  Visit https://desktop.github.com and download GitHub Desktop Install it Fill in your username and password  Bonus: connecting Slack to your repo https://get.slack.help/hc/en-us/articles/232289568-Use-GitHub-with-Slack\nReferences:  Happy Git and GitHub for the useR Install Git R packages  "
},
{
	"uri": "/tutorials/style/",
	"title": "R Coding Style Guide",
	"tags": [],
	"description": "",
	"content": "  Good coding style is like using correct punctuation. You can manage without it, but it sure makes things easier to read.  Hadley Wickham \n Introduction A language is a tool that allows human beings to interact and communicate with each other. The clearer we express ourselves, the better an idea is transferred from our mind to the other. The same applies to programming languages: concise, clear and consistent codes are easier to read and/or edit. It is especially important, if you have collaborators, who depend on your code. However, even if you don\u0026rsquo;t, keep in mind that at some point in time, you might come back to your code, for example, to fix an error. And if you did not follow consistently your coding style, reviewing your code can take much longer, than you expected. In this context, taking care of your audience means to make your code as readable as possible.\nThere is no such thing as a \u0026ldquo;correct\u0026rdquo; coding style, as there is no such thing as the best color. At the end of the day, the coding style is a set of developers\u0026rsquo; preferences. If you are coding alone, sticking to your coding style and being consistent is more than enough. The story is a bit different if you are working in a team: it is crucial to agree on a convention beforehand and make sure that everyone follows it.\nEven though there is no an official style guide, R is mature and steady enough to have an \u0026ldquo;unofficial\u0026rdquo; convention. In this tutorial, you will learn these \u0026ldquo;unofficial\u0026rdquo; rules, their deviations, and most common styles.\nNaming Naming files The convention actually depends on whether you develop a file for a package, or as a part of data analysis process. There are, however, common rules:\n File names should use .R extension.\n# Good read.R # Bad read  File names should be meaningful.\n# Good model.R # Bad Untitled1.R  File names should not contain / and spaces. Instead, a dash (-) or underscore (_) should be used.\n# Good fir_regression.R fir-regression.R # Bad fit regression.R   If the file is a part of the data analysis, then it makes sense to follow the following recommendations:\n File names should be lowercase. There is nothing bad in having capital case names, just bear in mind UNIX systems are case insensitive, meaning that test.R and Test.R do not differ.\n# Good analyse.R # Bad Analyse.R  Use meaningful verbs for file names.\n# Good validate-vbm.R # Bad regression.R  If files should be run in a particular order, then use ascending names.\n01-read.R 02-clean.R 02-plot.R   If the file is used in a pacakge, than slightly different rules should be taken care of:\n Mind special names:\n AllClasses.R (or AllClass.R), a file that stores all S4 classes definitions. AllGenerics.R (or AllGeneric.R), a file that stores all S4 generic functions. zzz.R, a file that contains .onLoad() and friends.  If the file contains only one function, name it by the function name.\n Use methods- prefix for S4 class methods.\n  Naming variables  Generally, names should be as short as possible, still meaningful nouns.\n# Good fit_rt split_1 imdb_page # Bad fit_regression_tree cross_validation_split_one foo  Variable names should be typically lowercase.\n# Good event # Bad Event  NEVER separate words within the name by . (reserved for an S3 dispatch) or use CamelCase (reserved for S4 classes definitions). Instead, use an underscore (_).\n# Good event_window # Bad event.window EventWindow  DO NOT use names of existing function and variables (especially, built-in ones).\n# Bad T \u0026lt;- 10 # T is a shortcut of TRUE in R c \u0026lt;- \u0026quot;constant\u0026quot;   Naming functions Many points of naming variables are similar for naming functions:\n Generally, function names should be verbs.\n# Good add() # Bad addition()  Use . ONLY for dispatching S3 generic.\n# Good bw_test() # Bad bw.test()  Add the underscore (_) prefix to a standard evaluation (SE) equivalent of a function (summrize vs sumarize_ ).\n  Naming S4 classes Class names should be nouns in CamelCase with initial capital case letter.\nSyntax Line length The maximum length of lines is limited to 80 characters (thanks to IBM Punch Card).\nIt is possible to display the margin in RStudio Source editor:\n Go to Tools -\u0026gt; Global Options\u0026hellip; -\u0026gt; Code -\u0026gt; Display Click on \u0026ldquo;Show margin\u0026rdquo; Set \u0026ldquo;Margin column\u0026rdquo; to 80  Spacing  Put spaces around all infix binary operators (=, +, *, ==, \u0026amp;\u0026amp;, \u0026lt;-, %*%, etc.).\n# Good x == y a \u0026lt;- a ^ 2 + 1 # Bad x==y a\u0026lt;-a^2+1  Put spaces around \u0026ldquo;=\u0026rdquo; in function calls (except for Bioconductor).\n# Good mean(x = c(1, NA, 2), na.rm = TRUE) # Bad mean(x=c(1, NA, 2), na.rm=TRUE)  Do NOT place space for subsetting ($ and @), namespace manipulation (:: and :::), and for sequence generation (:).\n# Good car$cyl dplyr::select 1:10 # Bad car $cyl dplyr:: select 1: 10  Put a space after a coma:\n# Good mtcars[, \u0026quot;cyl\u0026quot;] mtcars[1, ] mean(x = c(1, NA, 2), na.rm = TRUE) # Bad mtcars[,\u0026quot;cyl\u0026quot;] mtcars[1 ,] mean(x = c(1, NA, 2),na.rm = TRUE)  Use a space before left parentheses, except in a function call.\n# Good for (element in element_list) if (grade == 5.5) sum(1:10) # Bad for(element in element_list) if(grade == 5.5) sum (1:10)  No spacing around code in parenthesis or square brackets.\n# Good if (debug) message(\u0026quot;debug mode\u0026quot;) species[\u0026quot;tiger\u0026quot;, ] # Bad if ( debug ) message(\u0026quot;debug mode\u0026quot;) species[ \u0026quot;tiger\u0026quot; ,]   Curly braces  An opening curly brace should NEVER go on its own line and should always be followed by a new line.\n# Good if (is_used) { # do something } if (is_used) { # do something } else { # do something else } # Bad if (is_used) { # do something } if (is_used) { # do something } else { # do something else }  A closing curly brace should always go on its own line, unless it’s followed by else.\n# Good if (is_used) { # do something } else { # do something else } # Bad if (is_used) { # do something } else { # do something else }  Always indent the code inside curly braces (see next section).\n# Good if (is_used) { # do something # and then something else } # Bad if (is_used) { # do something # and then something else }  Curly braces and new lines can avoided, if a statement after if is very short.\n# Good if (is_used) return(rval)   Indentation ALWAYS indent your code!\n No tabs or mixes of tabs and spaces.\n There are two common number of spaces for indentation: two (Hadley and others) and four (Bioconductor). My own rule of thumb: I use four spaces indentation for data analyses scripts, and two spaces while developing packages.\n Choose the number of spaces of indentation up-front and stick to it. Never mix different number of spaces in one project.\n To set the number of spaces of the project, go to Tools -\u0026gt; Global options\u0026hellip; -\u0026gt; Code -\u0026gt; Editing. Check the following boxes: \u0026ldquo;Insert spaces for tab\u0026rdquo; (with \u0026ldquo;Tab width\u0026rdquo; equal to chosen number), \u0026ldquo;Auto-indent code after paste\u0026rdquo;, and \u0026ldquo;Vertically align arguments in auto-indent\u0026rdquo;.\n   Magic shortcut: Command+I (Ctrl+I for Windows/Linux) will indent a selected chunk of code. Together with Command+A (select all) it is a very powerful tool, which saves time.  Try a little exercise: paste the following code in your RStudio source editor, select it, and hit Command+I:\nfor(i in 1:10) { if(i %% 2 == 0) print(paste(i, \u0026quot;is even\u0026quot;)) }  New line  Very often a function definition does not fit into one line. In this case, excessive arguments should be moved to a new line, starting from the opening parenthesis.\nlong_function_name \u0026lt;- function(arg1, arg2, arg3, arg4, long_argument_name1 = TRUE)  If arguments expand more than into two lines, than each argument should be placed on a separate line.\nlong_function_name \u0026lt;- function(long_argument_name1 = c(\u0026quot;value1\u0026quot;, \u0026quot;value2\u0026quot;), long_argument_name2 = TRUE, long_argument_name3 = NULL, long_argument_name4 = FALSE)  The same applies to a function call: excessive arguments should be indented where the closing parenthesis is located, if only two lines are sufficient.\nplot(table(rpois(100, 5)), type = \u0026quot;h\u0026quot;, col = \u0026quot;red\u0026quot;, lwd = 10, main = \u0026quot;rpois(100, lambda = 5)\u0026quot;)  Otherwise, each argument can go into a separate line, starting from a new line after the opening parenthesis.\nlist( mean = mean(x), sd = sd(x), var = var(x), min = min(x), max = max(x), median = median(x) )  If the condition in if statement expands into several lines, than each condition should end with a logical operator, NOT start with it.\n# Good if (some_very_long_name_1 == 1 \u0026amp;\u0026amp; some_very_long_name_2 == 1 || some_very_long_name_3 %in% some_very_long_name_4) # Bad if (some_very_long_name_1 == 1 \u0026amp;\u0026amp; some_very_long_name_2 == 1 || some_very_long_name_3 %in% some_very_long_name_4)  I know some people who are completely against it. See the next bullet why I believe it is better.\n If the statement, which contains operators, expands into several lines, than each line should end with an operator, not start with it. Sometimes, it makes sense to split a formula into meaningful chunks.\n# Good normal_pdf \u0026lt;- 1 / sqrt(2 * pi * d_sigma ^ 2) * exp(-(x - d_mean) ^ 2 / 2 / s ^ 2) # Bad normal_pdf \u0026lt;- 1 / sqrt(2 * pi * d_sigma ^ 2) * exp(-(x - d_mean) ^ 2 / 2 / d_sigma ^ 2)  Not only it is ugly, but also syntactically wrong. In the second case, R will consider these two lines as two distinct statements: the first line will assign the value of 1 / sqrt(2 * pi * d_sigma ^ 2) to normal_pdf, and the second line will throw an error, since * does not have the first argument.\n Each grammar statement of dplyr (after %\u0026gt;%) and ggplot2 (after +) should start from a new line.\nmtcars %\u0026gt;% filter(cyl == 4) %\u0026gt;% group_by(am) %\u0026gt;% summarize(avg_mpg = mean(mpg)) ggplot(mtcars) + geom_point(aes(x = mpg, y = qsec, color = factor(am))) + geom_line(aes(x = mpg, y = qsec, color = factor(am)))   Comments  Comment your code. Always. Your collaborators and future-you will be very grateful. Comments starts by # followed by space and actual comment.\n# This is a comment.  Comments should explain the why, not the what. Comments should not replicate the code by a plain langue, but rather explain the overall intention of the command.\n# Good # define iterator i \u0026lt;- 1 # Bad # set i to 1 i \u0026lt;- 1  Short comments can be placed after code preceded by one space, #, and then one space.\nplot(price, weight) # plot a scatter chart of price and weight  To comment/uncomment selected chunk, use Command+Shift+C.\n Use roxygen2 comments for a package development (i.e., #') to comment functions.\n It makes sense to split the source into logical chunks by # followed by - or =.\n# Read data #--------------------------------------------------------------------------- # Tidy data #---------------------------------------------------------------------------   Other recommendations  Use \u0026lt;- for assignment, NOT =.\n Use library() instead of require(), unless it is a conscious choice. Package names should be characters (avoid NSE - non-standard evaluation).\n# Good library(\u0026quot;dplyr\u0026quot;) # Bad require(dplyr)  In a function call, arguments can be specified by position, by complete name, or by partial name. Never specify by partial name and never mix by position and by complete name.\n# Good mean(x, na.rm = TRUE) rnorm(10, 0.2, 0.3) # Bad mean(x, na = TRUE) rnorm(mean = 0.2, 10, 0.3)  While developing a package, specify arguments by name.\n The required (with no default value) arguments should be first, followed by optional arguments.\n# Good raise_to_power(x, power = 2.7) # Bad raise_to_power(power = 2.7, x)  The ... argument should either be in the beginning, or in the end.\n# Good standardize(..., scale = TRUE, center = TRUE) save_chart(chart, file, width, height, ...) # Bad standardize(scale = TRUE, ..., center = TRUE) save_chart(chart, ..., file, width, height)  Good practice is to set default arguments inside the function using NULL idiom, and avoid dependence between arguments:\n# Good histogram \u0026lt;- function(x, bins = NULL) { if (is.null(bins)) bins \u0026lt;- nclass.Sturges(x) ... } # Bad histogram \u0026lt;- function(x, bins = nclass.Sturges(x)) { ... }  Always validate arguments in a function.\n While developing a package, specify the namespace of each used function, except if it is from base package.\n Do NOT put more than one statement (command) per line. Do NOT use semicolon as termination of the command.\n# Good x \u0026lt;- 1 x \u0026lt;- x + 1 # Bad x \u0026lt;- 1; x \u0026lt;- x + 1  Avoid using setwd(\u0026quot;/Users/irudnyts/path/that/only/I/have\u0026quot;). Almost surely your collaborators will have different paths, which makes the project not portable. Instead, use here::here() function from here() package (for details see next tutorial).\n Avoid using rm(list = ls()). This statement delets all objects from the global enviroment, and gives you an illusion of a fresh R start (for details see next tutorial).\n  If you have read until this moment, you deserve a prize. There is a magic key combination Command+Shift+A that reformats selected code: add spaces and indent it. Do not use it exessively though!\nReferences  Advanced R Google\u0026rsquo;s R Style Guide Bioconductor Coding Style Efficient R programming Colin Gillespie’s R style guide The State of Naming Conventions in R Consistent naming conventions in R Project-oriented workflow Picture is taken from R Memes For Statistical Fiends Facebook page.  "
},
{
	"uri": "/project/schedule/",
	"title": "Schedule",
	"tags": [],
	"description": "",
	"content": "gantt dateFormat YYYY-MM-DD title Schedule for the projects section Time during class time for proposal :active, des1, 2018-10-09, 1d time for project :active, des2, 2018-11-27, 1d time for project :active, des2, 2018-12-04, 1d time for project :active, des2, 2018-12-11, 1d section Deadlines proposal :crit, 2018-10-23, 1d projects :crit, 2018-12-18, 1d  -- "
},
{
	"uri": "/homeworks/schedule/",
	"title": "Schedule",
	"tags": [],
	"description": "",
	"content": " gantt dateFormat YYYY-MM-DD title Schedule for the homeworks section Practicals homework 0 :active, des1, 2019-09-17, 1d homework 1 :active, des2, 2019-09-24, 2019-10-01 homework 2 :active, des3, 2019-10-08, 2019-10-15 homework 3 :active, des4, 2019-10-22, 2019-10-29 homework 4 :active, des5, 2019-11-05, 2019-11-12 section Deadlines homework 1 :crit, 2019-10-07, 1d homework 2 :crit, 2019-10-21, 1d homework 3 :crit, 2019-11-04, 1d homework 4 :crit, 2019-11-19, 1d  "
},
{
	"uri": "/syllabus/general/",
	"title": "General information",
	"tags": [],
	"description": "",
	"content": " Location and Time  Location: Anthropole/5081 Time: Tuesdays 8:30AM - 12PM  Course Websites  Course website: https://ptds.netlify.com/ Online textbook: http://r.smac-group.com/ Discussion Forum: https://piazza.com/unil.ch/fall2019/ptds2019/home  Course Staff Instructor  Name: Samuel Orso Email: Samuel.Orso@unil.ch Office: Anthropole/3090.1 Office Hours: Appointment may be made upon request.  find me on GitHub  Teaching Assistant  Name: Iegor Rudnytskyi Email: Iegor.Rudnytskyi@unil.ch Office: Anthropole/3090 Office Hours: Appointment may be made upon request.  find me on GitHub  "
},
{
	"uri": "/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": " Syllabus Discover what this class is all about and the different requirements.\n"
},
{
	"uri": "/lectures/additional/",
	"title": "Supplementary material",
	"tags": [],
	"description": "",
	"content": " We use this page to add supplementary material for the lectures.\nSlides  Git and GitHub   Get R file from Lecture #1   Get RMarkdown file from Lecture #2   \u0026hellip;and the bibliography   \u0026hellip;and the HTML output   Get RMarkdown file from Lecture #4   Get R file from Lecture #5   Get slides from October 23 tutorial   Get R file from October 23 tutorial   Get R file from Lecture #6   Get slides from November 6 tutorial   Get R file from November 6 tutorial  ## Shiny App [Tutorials](https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/) [Application layout guide](https://shiny.rstudio.com/articles/layout-guide.html)  Get R file from Lecture #7  ## R-package Check [Hadley's book](http://r-pkgs.had.co.nz/) The code of lecture #8 is on a GitHub rep [here](https://github.com/SMAC-Group/test0) ## R-package with Rcpp and Shiny App The code and the package of lecture #9 are accessible [here](https://github.com/SMAC-Group/RcppSpg) -- "
},
{
	"uri": "/tutorials/workflow/",
	"title": "Project-oriented workflow",
	"tags": [],
	"description": "",
	"content": "  It’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety.  Jenny Bryan \n Introduction In this tutorial we will learn key aspects of making a good research project:\n reproducible portable self-contained  In data science context, reproducibility means that the whole analysis can be recreated (or repeated) from the fresh start and raw data and get exactly the same results. It means, for instance, that if the analysis involves generating random numbers, then one has to set a seed (an initial state of a random generator) to obtain the same random split each time. Ideally, everyone should also have an access to data and software to replicate your analysis (it is not always the case, since data can be private).\nPortability means that regardless the operating system or a computer, for minimal given prerequisites, the project should work. For instance, if the project uses a particular package that works only on Windows, then it is not portable. The project is also not considered as portable, if it utilizes a particular computer settings, such as absolute paths instead of relative to your project folder (e.g., when reading the data or saving plots to files). Normally, you should be able to run the code on your collaborator\u0026rsquo;s machine without changing any lines in scripts.\nWe call a project self-contained, when you have everything you need at hand (i.e., in the folder of your project) and your porject does not affect anything it did not create. The project should not use a function, which you created in the other project five years ago \u0026ndash; it is very likely that no one else has this function. Further, if you need, for instance, to save a processed data, then it should be saved separately, and not overwrite the raw data.\nWhy this is a big deal? First off, it gives more credibility to the research, because it can be verified and validated by a third party. Further, keeping the flow of analysis reproducible, portable and self-contained makes it easier to extend.\nThere are no clear boundaries between these three properties, they are very close in meaning, and often overlap. As a consequence, techniques and practice we consider further improve all of them, rather than focusing on a particular one.\nEven if it might look like a yet another git / RStudio tutorial, this is a list of my recommendations based on my own experience and various posts.\nProject folder structure The size of the project increases exponentially. A project started as a harmless code snippet can easily pile up into a huge snowball of over hundred files with unstructured folder tree. To avoid this, it is important do define the folder structure before stepping into analyses. Depending whether the project is a package or a case study, its skeleton differs significantly.\nThe folder structure of R packages is a subject to a regulation of community (CRAN and Bioconductor). It is well-defined and can be explored in R packages book, therefore, I skip it in this tutorial.\nIn contrast to R packages, there is no a single right folder structure for analysis projects. Below, I present a simple yet extensible folder structure for data analysis project, based on several references that cover this issue.\nname_of_project/ |- data | |- raw | |- processed |- figures |- reports |- results |- scripts | |- deprecated |- .gitignore |- name_of_project.Rproj |- README.md  The parent folder that will contain all project\u0026rsquo;s subfolders should have the same name as your project. Pick a good one. Spending an extra 5 minutes will save you from regrets in the future. The name should be short, concise, written in lower-case, and not contain any special symbols. One can apply similar strategies as for naming packages.\nThe folder data typically contains two subfolders, namely, raw and processed. The content of raw directory is data files of any kind, such as .csv, SAS, Excel, text and database files, etc. The content of this folder is read only, so that no scripts should change the original files or create new ones. For this purpose the processed directory is used: all processed, cleaned, and tidied datasets are saved here. It is a good practice to save files in R format, rather than in .csv, since the former one is a more efficient way of storing data (both in terms of space and time of reading/writing). The preference is given to .rds files over .RData (see why in Content of R files section). Again, files should have representative names (merged_calls.rds vs dataset_1.rds). Note that it should be possible to regenerate those datasets from your scripts. In other words, if you remove all files from this folder, it must be possible to restore all of them by executing your scripts that use only the data from raw.\nThe folder figures is the place where you may store plots, diagrams and other figures. There is not much to say about it. Common extensions of such files are .eps, .png, .pdf, etc. Again, file names in the folder should be meaningful (the name img1.png does not represent anything).\nAll reports live in directory with the corresponding name reports. These reports can be of any formats, such as LaTeX, Markdown, R Markdown, Jupyter Notebooks, etc. Currently, more and more people prefer rich documents with text and executable code to LaTeX and friends.\nNot all output object of the analysis are data files. For example, you have calibrated and fitted your deep learning network to the data, which took about an hour. Of course, it would be painful to retrain the model each time you run the script, and you want to save this model. Then, it is reasonable to save it in results with .rmd extension.\nPerhaps the first by importance folder is scripts. There you keep all your R scripts and codes. That is the exact place to use prefix numbers, if files should be run in a particular order (see previous tutorial). If you have files in other scripted languages (e.g., Python), it better to locate them in this folder as well. There is also an important subfolder called depricated. Whenever you want to remove one or the other script, it is a good practice to move it to depricated at first iteration, and only they delete. The script you want to remove can contain functions or analysis used by other collaborators. Moving it firstly to depricated ensures that the file is not used by other collaborators.\nThere are three important files in the project folder: .gitignore, name_of_project.Rproj, and README.md. The file .gitignore lists files that won\u0026rsquo;t be added to Git system: LaTeX or C build artifacts, system files, very large files, or files generated for particular cases. Further, the name_of_project.Rproj contains options and meta-data of the project: encoding, the number of spaces used for indentation, whether or not to restore a workspace with launch, etc. The README.md briefly describes all high-level information about the project, like an abstract of a paper.\nThe proposed folder structure is far from being exhaustive. You might need to introduce other folders, such as paper (where .tex version of a paper lives), sources ( a place for your compiled code here, e.g. C++), references, presentations, NEWS.md, TODO.md, etc. At the same time, keeping an empty folders could be misleading, and it is better to remove them (unless you are planning to store anything in them in the future).\nSeveral R packages, namely ProjectTemplate, template, and template are dedicated to project structures. Also it is possible to construct a project tree by forking manuscriptPackage or sample-r-project repositories (repo for short). Using a package or forking a repo allow for automated structure generation, but at the same time introduce many redundant and unnecessary folders and files.\nFinally, some scientists believe that all R projects should be in a shape of a package. Indeed, one can store data in \\data, R scripts in \\R, documentation in \\man, and the paper \\vignette. The nice thing about it that anyone familiar with an R package structure can immediately grasp where each type of a file located. On the other hand, the structure of R packages is tailored to serve its purpose \u0026ndash; make a coherent tool for data scientists and not to produce a data product: there is no distinction between functions definitions and applications, no proper place for reports, and finally there are no place for other script languages that you can use (e.g, Bash, Python, etc.).\nContent of R files While there are no rules how to organize your R code, there are several dos and don\u0026rsquo;ts that most of the time are not tough explicitly. I cover them below:\n Do not use the function install.packages() inside your scripts. You are not suppose to (re)install packages each time when you run your files. By default it is normally assumed that all packages that are used by a script are already installed.\nIf there are many of them to install, it is better to create a file configure.R, that will install all packages:\npkgs \u0026lt;- c(\u0026quot;ggplot2\u0026quot;, \u0026quot;plyr\u0026quot;) install.packages(pkgs)  The snippet above profits from the fact that install.packages() is a vectorized function. Anyway, most of the time, install.packages() is suppose to be called from the console, and not from the script.\n Do not use the function require(), unless it is a conscious choice. In contrast to library(), require() does not throw an error (only a warning) if the package is not installed.\n Use a character representation of the package name.\n# Good library(\u0026quot;ggplot2\u0026quot;) # Bad library(ggplot2)  Load only those packages that are actually used in the script. Load packages at the beginning of the script.\n Do not use rm(list = ls()) that erase your global environment. First, it could delete accidentally the precious heavy long-time-to-build object. Second, it gives an illusion of the fresh start of R.\n Do not use setwd(\u0026quot;/Users/irudnyts/path/that/only/I/have\u0026quot;). It is very unlikely that someone except you will have the same path to the project. Instead, use a package here and relative paths. The package here automatically recognizes the path to the project, and starts from there:\n# Good library(\u0026quot;here\u0026quot;) cars \u0026lt;- read.csv(file = here(\u0026quot;data\u0026quot;, \u0026quot;raw\u0026quot;, \u0026quot;cars.csv\u0026quot;)) # Bad setwd(\u0026quot;/Users/irudnyts/path/that/only/I/have/data/raw\u0026quot;) cars \u0026lt;- read.csv(file = \u0026quot;cars.csv\u0026quot;)  If your script involves random generation, then set a seed by set.seed() function to get the same random split each time:\n# Good set.seed(1991) x \u0026lt;- rnorm(100) # Bad x \u0026lt;- rnorm(100)  Do not repeat yourself (DRY). In R context it means the following: if the code repeated more than to times, you had better wrap it into a function.\n# Better fix_missing \u0026lt;- function(x) { x[x == -99] \u0026lt;- NA x } df[] \u0026lt;- lapply(df, fix_missing) # Bad df$a[df$a == -99] \u0026lt;- NA df$b[df$b == -99] \u0026lt;- NA df$c[df$c == -98] \u0026lt;- NA df$d[df$d == -99] \u0026lt;- NA df$e[df$e == -99] \u0026lt;- NA df$f[df$g == -99] \u0026lt;- NA  Separate function definitions from their applications.\n Use saveRDS() instead of save():\n    save() saves the objects and their names together in the same file; saveRDS() only saves the value of a single object (its name is dropped). load() loads the file saved by save(), and creates the objects with the saved names silently (if you happen to have objects in your current environment with the same names, these objects will be overridden); readRDS() only loads the value, and you have to assign the value to a variable.  Yihui Xie    Inizializing a new data analysis project Disclaimer: the procedure below can be done in different ways. This particular way is no better than the others, but from author opinion has the most logical flow.\nPrerequisites:\n Installed and configured Git Installed R and RStudio Existing account in Github  Steps:\n Pick a good name (e.g., beer).\n In RStudio create a project:\n Navigate to File -\u0026gt; New project\u0026hellip; Select New Directory Select New project (unless you are developing a package or a ShinyApp) Insert your picked name into Directory name Check Create a git repository     This creates a folder with the name of the project, initialize a local git repo, generate an .Rproj file, and a .gitignore file.\n Add a file structure as discussed in section, that is folder data (with raw and processed subfolders), figures, etc.\n Create a README.md file.\n Launch Terminal and navigate your working directory (of Terminal, not R) to your project folder by, for instance, cd /Users/irudnyts/Documents/projects/beer.\n Record changes by git add --all and commit by git commit -m \u0026quot;Create a folder structure of the project.\u0026quot;. Traditionally the message of the first commit is simple \u0026quot;First commit.\u0026quot;, but I prefer to write something more conscious, like \u0026quot;Create a folder structure of the project.\u0026quot;.\nNow all you changes are recoreded locally.\nNote also that Git does not record empty folders.\n Create a new repo in GitHub (the same procedure holds for Bitbucket and Gitlab):\n Fill in Repository name with the same name as your project. Fill in Description with one line that briefly explains the intent of the project and ends with full stop. (Check Private for homeworks). Hit Create repository.    Connect your local repo to your Github repo by\ngit remote add origin git@github.com:irudnyts/beer.git git push -u origin master  Refresh the page at your browser to ensure that changes appear at Github repo (do not freak out if you do not see all folders you have created, Git does not record empty folders).\n  Working with an existing data analysis project  Pull changes introduced by your collaborators by git pull.\n Modify your files. If you want to delete a script, first off, move it to \\depricated, and then remove it from there during the next iteration.\n Add changes by git add --all and commit by git commit -m \u0026quot;A concious commit message.\u0026quot;.\n Push changes by git push. Merge changes if needed.\n  References  R packages Project-oriented workflow save() vs saveRDS() Jupyter And R Markdown: Notebooks With R A sample R project structure sample-r-project repo Creating an analysis as a package and vignette Analyses as Packages Packages vs ProjectTemplate Organizing the project directory Designing projects Project Management With RStudio Folder Structure for Data Analysis Organizing files for data analysis A meaningful file structure for R projects Packaging data analytical work reproducibly using R (and friends) What\u0026rsquo;s in a Name? The Concepts and Language of Replication and Reproducibility Packaging Your Reproducible Analysis Tools for Reproducible Research Data Analysis and Visualization in R for Ecologists Stop the working directory insanity manuscriptPackage cboettig/template Pakillo/template A minimal Project Tree in R -ProjectTemplate Writing a paper with RStudio Reproducibility vs. Replicability: A Brief History of a Confused Terminology  "
},
{
	"uri": "/project/scope/",
	"title": "Scope",
	"tags": [],
	"description": "",
	"content": "Your semester project is meant to showcase what you have learned in this class. You should choose a topic that you find interesting but that is also reasonable to complete within the scope of the class and the time at your disposal. Each project must respect the following criteria:\n Propose a new visualization tool for an application you are interested in.\n Involve a significant amount for programming done by all members of the group.\n Have fun doing it.  "
},
{
	"uri": "/homeworks/hw0/",
	"title": "homework #0",
	"tags": [],
	"description": "",
	"content": " Homework generously provided by the Data Science in Business Analytics class.\nThis homework is optional and is not graded.\n In this optional tutorial you will get an overview of the basic programming concepts in R and main data types. Just enough to get you up and running essential R code. However, for true \u0026ldquo;beginners\u0026rdquo;, we highly recommend going through Advanced R - Chapter \u0026lsquo;Foundations\u0026rsquo; from which the content of this assignment is mainly (mostly) inspired by.\nInstallation and setup Please visit this page for the installation guideline.\nAssignment In R, we assign values (numbers, characters, data frames) to objects (vectors, matrices, variables). To do so, we use the \u0026lt;- operator:\n# name_of_object \u0026lt;- value an_object \u0026lt;- 2 another_object \u0026lt;- \u0026quot;some string\u0026quot; # inspect object's value an_object print(another_object)  Data Structures R’s base data structures can be organised by their dimensionality (1d, 2d, or nd) and whether they’re homogeneous (all contents must be of the same type) or heterogeneous (the contents can be of different types).\n    Homogeneous Heterogeneous     1d Atomic vector List   2d Matrix Data frame   nd Array     Vectors The basic data structure in R is the vector. Vectors can be of two kinds: atomic vectors and lists. They have three common properties:\n Type, typeof(), what it is. Length, length(), how many elements it contains. Attributes, attributes(), additional arbitrary metadata. They differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.  There are four common types of atomic vectors:\n logical integer double (often called numeric) character  Atomic vectors are usually created with c(), short for combine:\ndbl_var \u0026lt;- c(1, 2.5, 4.5) # with the L suffix, you get an integer rather than a double int_var \u0026lt;- c(1L, 6L, 10L) # use TRUE and FALSE (or T and F) to create logical vectors log_var \u0026lt;- c(TRUE, FALSE, T, F) chr_var \u0026lt;- c(\u0026quot;these are\u0026quot;, \u0026quot;some strings\u0026quot;) int_var \u0026lt;- c(1L, 6L, 10L) typeof(int_var) is.integer(int_var)  Lists List objects can hold elements of any type, including lists. You construct lists by using list() instead of c():\nx \u0026lt;- list(1:3, \u0026quot;a\u0026quot;, c(TRUE, FALSE, TRUE), c(2.3, 5.9)) str(x)  Attributes All objects can have arbitrary additional attributes, used to store metadata about the object. Attributes can be thought of as a named list (with unique names). They can be accessed individually with attr() or all at once (as a list) with attributes().\ny \u0026lt;- 1:10 attr(y, \u0026quot;my_attribute\u0026quot;) \u0026lt;- \u0026quot;This is a vector\u0026quot; # inspect the attribute of y attr(y, \u0026quot;my_attribute\u0026quot;)  Matrices and arrays Adding a dim attribute to an atomic vector allows it to behave like a multi-dimensional array. A special case of the array is the matrix, which has two dimensions. Matrices and arrays are created with matrix() and array(), or by using the assignment form of dim():\n# two scalar arguments to specify rows and columns a \u0026lt;- matrix(1:6, ncol = 3, nrow = 2) # one vector argument to describe all dimensions b \u0026lt;- array(1:12, c(2, 3, 2)) # you can also modify an object in place by setting dim() c \u0026lt;- 1:6 dim(c) \u0026lt;- c(3, 2) c  length() and names() have high-dimensional generalisations:\n length() generalises to nrow() and ncol() for matrices, and dim() for arrays.\n names() generalises to rownames() and colnames() for matrices, and dimnames(), a list of character vectors, for arrays.\n  c() generalises to cbind() and rbind() for matrices, and to abind() (provided by the abind package) for arrays. You can transpose a matrix with t(); the generalised equivalent for arrays is aperm().\nYou can test if an object is a matrix or array using is.matrix() and is.array(), or by looking at the length of the dim(). as.matrix() and as.array() make it easy to turn an existing vector into a matrix or array.\nData frames A data frame is the most common way of storing data in R, and if used systematically makes data analysis easier. Under the hood, a data frame is a list of equal-length vectors. This makes it a 2-dimensional structure, so it shares properties of both the matrix and the list. This means that a data frame has names(), colnames(), and rownames(), although names() and colnames() are the same thing. The length() of a data frame is the length of the underlying list and so is the same as ncol(); nrow() gives the number of rows.\ndf \u0026lt;- data.frame(x = 1:3, y = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;)) str(df)  You can combine data frames using cbind() and rbind():\ncbind(df, data.frame(z = 3:1))  Subsetting vectors Let’s explore the different types of subsetting with a simple vector, x.\nx \u0026lt;- c(2, 4, 3, 5)  Positive integers return elements at the specified positions:\nx[c(3, 1)]  Duplicated indices yield duplicated values\nx[c(1, 1)]  Real numbers are silently truncated to integers\nx[c(2, 9)]  Negative integers omit elements at the specified positions:\nx[-c(3, 1)]  You can’t mix positive and negative integers in a single subset: x[c(-1, 2)]\nLogical vectors select elements where the corresponding logical value is TRUE. This is probably the most useful type of subsetting because you write the expression that creates the logical vector:\nx[c(TRUE, TRUE, FALSE, FALSE)] x[x \u0026gt; 3]  A missing value in the index always yields a missing value in the output:\nx[c(TRUE, TRUE, NA, FALSE)]  Nothing returns the original vector. This is not useful for vectors but is very useful for matrices, data frames, and arrays. It can also be useful in conjunction with assignment.\nx[]  Zero returns a zero-length vector. This is not something you usually do on purpose, but it can be helpful for generating test data.\nx[0]  If the vector is named, you can also use character vectors to return elements with matching names:\n(y \u0026lt;- setNames(x, letters[1:4])) y[c(\u0026quot;d\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;a\u0026quot;)]  Like integer indices, you can repeat indices:\ny[c(\u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;)]  Subsetting with names returns always the match exactly, if any.\nz \u0026lt;- c(abc = 1, def = 2) z[c(\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;)]  Subsetting lists, matricies and data frames Subsetting a list works in the same way as subsetting an atomic vector. Using [ will always return a list; [[ and $, as described below, let you pull out the components of the list.\nYou can subset higher-dimensional structures in three ways:\n With multiple vectors. With a single vector. With a matrix.\na \u0026lt;- matrix(1:9, nrow = 3) colnames(a) \u0026lt;- c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot;) # multiple vectors a[1:2, ] df \u0026lt;- data.frame(x = 1:3, y = 3:1, z = letters[1:3]) # selecting by value of certain vector df[df$x == 2, ]   Importing data in R The following checklist makes it easier to import data correctly into R:\n The first row is maybe reserved for the header, while the first column is used to identify the sampling unit; Avoid names, values or fields with blank spaces, otherwise each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in your data set; Short names are prefered over longer names; Try to avoid using names that contain symbols such as ? $ % ^ \u0026amp; * ( ) - # , ; . \u0026lt; \u0026gt; / | \\ [ ] { }; Make sure that any missing values in your data set are indicated with NA.\nlibrary(readr) # import data from .txt file df \u0026lt;- read_table( \u0026quot;https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.txt\u0026quot;, col_names = FALSE) df # import data from .csv file df \u0026lt;- read.table( \u0026quot;https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.csv\u0026quot;, header = TRUE, sep = \u0026quot;,\u0026quot;)   Functions Standard format for defining a function in R:\nmy_function_name \u0026lt;- function(arg1 = \u0026quot;default\u0026quot;, arg2 = \u0026quot;default\u0026quot;) { # 'cat' is used for concatenating strings merged_string \u0026lt;- cat(arg1, arg2) # if not specified, last evaluated object is returned return(merged_string) } # call a function elsewhere from code arg1 \u0026lt;- \u0026quot;Hello\u0026quot; arg2 \u0026lt;- \u0026quot;World!\u0026quot; a_greeting \u0026lt;- my_function_name(arg1, arg2) print(a_greeting)  CRAN - the curated repository of R packages provides millions of functions that you could use to tackle data. You simply need to install a package, and then call the function from your R code function_name(somearguments). For example, the package stats helps you in fitting linear model through the function lm():\nlibrary(stats) x \u0026lt;- rnorm(500) y \u0026lt;- x*4 + rnorm(500) lm.fit \u0026lt;- lm(y~x, data = data.frame(x, y)) print(lm.fit)  How many functions have been used in the example? What does rnorm mean? You can get informed about any R function by using its documentation ?function_name or ?packageName::function_name.\nTry it yourself! Exercise 1 Try to figure out the answers without executing the code. Check your answers in R Studio.\na) Given the vector: x \u0026lt;- c(\u0026quot;ww\u0026quot;, \u0026quot;ee\u0026quot;, \u0026quot;ff\u0026quot;, \u0026quot;uu\u0026quot;, \u0026quot;kk\u0026quot;), what will be the output for x[c(2,3)]?\nb) Let a \u0026lt;- c(2, 4, 6, 8) and b \u0026lt;- c(TRUE, FALSE, TRUE, FALSE), what will be the output for the R expression max(a[b])?\nc) Is it possible to apply the function my_function_name using x and a as arguments?\nExercise 2 Consider a vector x such that: x=c(1, 3, 4, 7, 11, 18, 29) Write an R statement that will return a list X2 with components of value: x * 2, x / 2, sqrt(x) and names 'x*2', 'x/2', 'sqrt(x)'.\nExercise 3 Read the file Table0.txt into an object DS.\na) What is the data type for the object DS?\nb) Change the names of the columns to Name, Age, Height, Weight and Sex.\nc) Change the row names so that they are the same as Name, and remove the variable Name.\nd) Get the number of rows and columns of the data.\nExercise 4 a) Convert DS from the previous exercise to a data frame DF.\nb) Add an additional column \u0026ldquo;zeros\u0026rdquo; in DF with all elements 0.\nc) Remove the Weight comuln from DF.\n"
},
{
	"uri": "/lectures/",
	"title": "Lectures",
	"tags": [],
	"description": "",
	"content": " Lectures The ideal schedule is given below. Chapters refer to the book An Introduction to Statistical Programming Methods with R\n   Week Date Time Topic Instructor     1 Sept. 17 8:30-10:00 Introduction, RMarkdown Samuel Orso   1 Sept. 17 10:15-12:00 Howework #0, R coding style guide (self-studying) Samuel Orso   2 Sept. 24 8:30-10:00 GitHub, Project-oriented workflow Iegor Rudnytskyi   2 Sept. 24 10:15-12:00 Howework #1 Iegor Rudnytskyi   3 Oct. 1 8:30-10:00 Data structures Samuel Orso   3 Oct. 1 10:15-12:00 Howework #1, Project coaching Samuel Orso   4 Oct. 8 8:30-10:00 Control structures Iegor Rudnytskyi   4 Oct. 8 10:15-12:00 Howework #2 Iegor Rudnytskyi   5 Oct. 15 8:30-10:00 Project proposal presentations Samuel Orso   5 Oct. 15 10:15-12:00 Howework #2 Samuel Orso   6 Oct. 22 8:30-10:00 Functions, Debugging Iegor Rudnytskyi   6 Oct. 22 10:15-12:00 Howework #3 Iegor Rudnytskyi   7 Oct. 29 8:30-10:00 Web-scrapping, Regular expressions Iegor Rudnytskyi   7 Oct. 29 10:15-12:00 Howework #3 Iegor Rudnytskyi   8 Nov. 5 8:30-10:00 Shiny Web applications Samuel Orso   8 Nov. 5 10:15-12:00 Howework #4 Samuel Orso   9 Nov. 12 8:30-10:00 R-packaging Samuel Orso   9 Nov. 12 10:15-12:00 Howework #4 Samuel Orso   10 Nov. 19 8:30-10:00 Regular expressions Iegor Rudnytskyi   10 Nov. 19 10:15-12:00 Project coaching Iegor Rudnytskyi   11 Nov. 26 8:30-10:00 Project coaching Samuel Orso   11 Nov. 26 10:15-12:00 Project coaching Samuel Orso   12 Dec. 3 8:30-10:00 Project coaching Iegor Rudnytskyi   12 Dec. 3 10:15-12:00 Project coaching Iegor Rudnytskyi   13 Dec. 10 8:30-10:00 Project coaching Samuel Orso   13 Dec. 10 10:15-12:00 Project coaching Samuel Orso   14 Dec. 17 8:30-10:00 Project presentations Samuel Orso, Iegor Rudnytskyi   14 Dec. 17 10:15-12:00 Project presentations Samuel Orso, Iegor Rudnytskyi    "
},
{
	"uri": "/syllabus/coursedescr/",
	"title": "Course description",
	"tags": [],
	"description": "",
	"content": "This class is intended to introduce to the students a wide range of programming tools using the R language. Tentative list of topics that will be discussed in this class are listed below:\n Reproducible research: knitr and rmarkdown Version control: GitHub Introduction to programming: Data structures, logical operators, control structures and functions Visualizations: Exploratory data analysis with Base R and ggplot2 R packages: Construction of R-packages using devtools, roxygen2 and pkgdown Communication: webiste creation via blogdown, Web application via shiny Web scraping: Automatic extraction of data from websites using SelectorGadget, rvest and quantmod, regular expression High performance computing: R and C++ integration via Rcpp, parallel computing.  No IT background is assumed from the students but a strong will to learn useful and practical programming skills.\nThis course is complementary to the Data Science in Business Analytics class, taught in Spring 2019. Although not mandatory, we recommend the students to follow the Data Science in Business Analytics class prior to ours as it will facilitate they learning curve and diminish the importance of the workload that this class represents.\n "
},
{
	"uri": "/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": " Tutorials This section contains the tutorials on various topics, namely, coding style guide, basics of syntax, best practice, conventions, typical workflows, etc.\n"
},
{
	"uri": "/project/proposal/",
	"title": "Proposal",
	"tags": [],
	"description": "",
	"content": " Presentation of the proposal is held the 2019-10-15.\n To make sure that your project is suitable we organize a project proposal presentation on October 15th, 2019. It consists of a 5 minutes presentation (make sure you respect that!) where you should try to \u0026ldquo;sell\u0026rdquo; your project idea to the class. This presentation can be done in any form but you should address the following points:\n Problem / Topic: What problem or topic are you addressing? Why is it worth doing? Will you be able to use the project as a way to demonstrate your R savvy-ness (e.g. to future employers, application to grad school)?\n Idea: What is your idea for addressing the problem or topic? Why is it original relative to prior work? Where did the idea come from?\n Feasibility: Is this project able to be completed before the end of the semester? What steps must occur to complete the project before the end of the semester?  Some ideas may be found on these links (updated 2018-10-09) https://cran.r-project.org/web/views/WebTechnologies.html http://amsantac.co/blog/en/2016/05/28/twitter-r.html https://insanelyanalytics.wordpress.com/2016/04/04/my-new-r-shiny-web-application-prediction-of-success-of-a-movie-with-twitter-corpus-check-it-out-and-spread-the-word/ https://solomonathiraj.shinyapps.io/pbottd/ http://thinktostart.com/analyze-linkedin-with-r/\n"
},
{
	"uri": "/homeworks/hw1/",
	"title": "homework #1",
	"tags": [],
	"description": "",
	"content": " Deadline: 2019-10-07 at 4pm\nTo submit your work, add samorso and irudnyts as collaborators to your private GitHub repo.\nWe will grade only the latest files prior to the deadline. Any ulterior modifications are pointless.\n The objectives of this homework assignment are the followings:\n Build your own RMarkdown document.\n Master different aspects of RMarkdown syntax.\n Become familiar with GitHub as a collaborative tool.  To begin with, create a (preferably private) GitHub repository for your group, and name it ptds2018hw1. Once again, make sure to add samorso and irudnyts as collaborators. This project must be done using GitHub and respect the following requirements:\n All members of the group must commit at least once.\n All commit messages must be reasonably clear and meaningful.\n Your GitHub repository must include at least one issue containing some form of TO DO list.\n  In your repository, create a RMarkdown file called hw1.Rmd providing an HTML output with the theme cerulean and syntax highlighting tango. This file should contain the following elements:\n A \u0026ldquo;title\u0026rdquo; section which should at least include:\n A title (e.g. Homework 1)\n The authors\n The date (think of using Sys.time())\n  A section called \u0026ldquo;Introduction\u0026rdquo; where you provide a short summary of the structure of your homework. Moreover, record a short video to introduce your group and include it in your RMarkdown document.\n A section called \u0026ldquo;Group Members\u0026rdquo;. This section should have one sub-section for each group member in your team. For example, a group with three members should have three sub-sections. Each of these sub-sections (named after each group member) should include small biographies containing at least the following elements:  A picture of your choice (preferably of yourself). Make sure to include a caption for this image.\n A paragraph describing your favorite hobby as well as one interesting fact about yourself (preferably true).\n Your favorite quote in blockquote format. Make sure to reference your quote using BibTex.\n A table having two columns (first column containing the classes you are following this semester; second column containing the time of these classes).\n  A section called \u0026ldquo;RMarkdown Syntax\u0026rdquo;, where you will demonstrate your RMarkdown skills! In this section make sure to:  Show an example where the chunk option cache = T leads to a misleading answer. This example must be different from the one presented in the textbook.\n Simulate 100 random samples from a standard normal distribution using the function rnorm(). Store these 100 values in a vector called x. Then, compute the empirical median, mean and variance of x. Are these results different from 0, 0 and 1 (their respective theoretical values)? Is this result surprising? Justify your answer.\n Include a graph showing the histogram of x (make sure to include a caption to this figure). You can use the R function hist() or the ggplot2 function.\n Include the following equation:  Include the following in-line equation:  Include the following text in blue: \u0026ldquo;Vérité dans un temps, erreur dans un autre.\u0026rdquo;, Charles de Montesquieu\n Include a \u0026ldquo;More info\u0026rdquo; button with hide/unhide functionality.\n Include a \u0026ldquo;color box\u0026rdquo;\u0026rdquo; with some text.\n  A \u0026ldquo;References\u0026rdquo; section that contains all the references used in your document.  "
},
{
	"uri": "/syllabus/grading/",
	"title": "Grading",
	"tags": [],
	"description": "",
	"content": " There are 60 points in total for this class. The final grades are given as follows:\n   Grade Points     6.0 57-60   5.5 52-56   5.0 47-51   4.5 42-46   4.0 37-41   3.5 32-36   3.0 27-31   2.5 22-26   2.0 17-21   1.5 12-16   1.0 0-11    Learning outcomes will be assessed based on the performances within each of the following categories:\n   Type Points Bonus     Semester project 30 3   Homeworks 30 3    Bonuses may be obtained at our discretaion for the groups or individuals that give outstanding work for each of these categories, described in more details below.\nNo final examination for this class. The learning outcomes are continuously assessed during the semester with the homeworks, the project and the participation.\n Semester project The final project provides an opportunity to combine content learned throughout the course for use in some realistic application. All projects are conducted in groups. The details of the semester project are discussed in class and students will have the opportunity to choose between several project formats (see also the project page for more details). The 30 points of the grade are allocated according to the following criteria:\n Overall quality (3 points) Interest and complexity of the subject (3 points) Presentation (6 points) Screencast (3 points) Shiny app (3 points) Provided documentation (3 points) R package (3 points) GitHub repository (3 points) Website (3 points)  The semester project are peer evaluated: every group grades the others and send a brief report to the instructors. The instructors grade as well the project. The final points obtained for the project is given by taking 50% of the instructors\u0026rsquo; grades and 50% of the average from the other groups\u0026rsquo; grades.\nDo not underestimate the workload that the project represents. This class requires good planning and team management from the students.\n Homeworks There are four homework assignments during the semester which are realized in groups. Each of these homeworks combines some of the content learned throughout the course. There are five points per homework. Homeworks and their specific requirements are detailed at the homeworks page.\nLate submission is penalized by 1 point every 24 hours after the deadline.\n "
},
{
	"uri": "/syllabus/communication/",
	"title": "Communication",
	"tags": [],
	"description": "",
	"content": " Piazza Follow this link to sign-up to Pizza.\n We will be using Piazza for class-related discussion and questions, to help you benefit from each other’s questions and the collective knowledge of your classmates and instructors. Questions can be posted to the entire class (for content-related questions). I encourage you to ask questions if you are struggling to understand a concept, and to answer your classmates’ questions when you can.\nDo Not use Piazza for issues related to your grade or other private matters (not even an instructor post). Email those questions or comments to the instructor directly or discuss them in person.\n Email Most issues about classroom activities can be posted to Piazza, but you should use email (or a conversation in person) for all personal or private matters.\n"
},
{
	"uri": "/project/output/",
	"title": "Final Project",
	"tags": [],
	"description": "",
	"content": " Presentations of the projects are held the 2019-12-17. You have 10 minutes of presentation + 5 minutes of questions per group. Each member should present a piece of the presentation.\n The output of your project must be:\n An awesome project!\n A well documented GitHub repository (see e.g. https://github.com/SMAC-Group/ds) which should be called groupX_project where X is your group number.\n A website showcasing your work (think of adding a screencast video) used as a GitHub page (see e.g. https://smac-group.github.io/stat297/).\n An R package that can be installed directly from GitHub (such as the stat297 package which can be installed as devtools::install_github(\u0026ldquo;SMAC-Group/stat297\u0026rdquo;)). More specifically this package should have:\n A DESCRIPTION file with all necessary information including, but not limited to, Package title, general description, dependencies, license, and imports.\n R/Rcpp functions with documentation including title, description, parameters, authors, exports, and at least one example.\n A well formatted package skeleton (man, inst, docs, R, etc.) A shiny app to allow someone having absolutely no R knowledge to “use” what you have done in your project.\n This package should work. This means that the instructors should be able to call all necessary (intended) functions with yourpackage::yourfunction.   "
},
{
	"uri": "/homeworks/",
	"title": "Homeworks",
	"tags": [],
	"description": "",
	"content": " Homeworks There are four graded homeworks to be submitted at different deadlines during the semester. The homeworks represent 50% of the final grade. Time management is important for succeeding in this class, try to avoid the following example:\n"
},
{
	"uri": "/project/groups/",
	"title": "Groups",
	"tags": [],
	"description": "",
	"content": "Please use this link to register a group. The entire group should be register at once. On the second week please verify groups\u0026rsquo; composition at this page.\n Group 1  David Pitteloud (david.pitteloud@unil.ch) Leonard Philippossian (leonard.philippossian@unil.ch) Rita Sefraoui Tahiri (rita.sefraouitahiri@unil.ch) Simon Fornerod (simon.fornerod@unil.ch) Alexandre Schroeter (alexandre.schroeter@unil.ch)  Group 2 (Gryffindor)  Nicolas Richtmann (nicolas.richtmann@unil.ch) Matthias Speicher (matthias.speicher@unil.ch) Stefan Sillober (stefan.sillober@unil.ch) Maksim Solonin (maksim.solonin@unil.ch) Yong Jiang (yong.jiang@unil.ch)  Group 3 (Group Alpha)  M Redwan Hasan (mredwan.hasan@unil.ch) Pierre-Emmanuel Got (pierre-emmanuel.got@unil.ch) Jeremy Choppe (jeremy.choppe@unil.ch) Claudio Previte (claudio.previte@unil.ch) Ana-Maria Casian (ana-maria.casian@unil.ch)  Group 4 (The rocket scientists)  Guillaume Lakah (guillaume.lakah@unil.ch) Mathieu Schnyder (mathieu.schnyder@unil.ch) Monica Navarro (monica.navarro@unil.ch) Ines Guardans Gonzalez (ines.guardansgonzalez@unil.ch)  Group 5  Saphir Kwan (saphir.kwan@unil.ch) Anna Alfieri (anna.alfieri@unil.ch) Ana Lucy Bejarano Montalvo (analucy.bejaranomontalvo@unil.ch) Erika Lardo (erika.lardo@unil.ch) Clement Perez (clement.perez@unil.ch)  Group 6  Rebecca Silden Langlo (rebecca.sildenlanglo@unil.ch) Ferdinando Pepe (ferdinando.pepe@unil.ch) Niels Saalfeldt (niels.saalfeldt@unil.ch) Edvard Edding (edvard.edding@unil.ch) Emily Trentmann (emily.trentmann@unil.ch)   ) - Ali Karray () - Youness Zarhloul () - Maurizio Griffo () - Mohit Mehrotra () * Group 2 - **Emil Jellum** () - Louis Polet () - Cristina Montecchi () - Laura Agnese Marzorati () - Federico Baldo () * Group 3 - **Vanessa Armistead** () - Luisa Pricken () - Bart Roes () - Ameni Rouatbi () * Group 4 (ggplot3) - **Lumia Claramunt** () - Julien Kleinmann () - Constance Havret () - Azza Kammoun () - Sana Ghali () * Group 5 (The Jonquilles) - **David Germano** () - Patrik Grandadam () - Luca Bron () - Edgar Raisin () - Vincent Lomazzi () -- "
},
{
	"uri": "/syllabus/material/",
	"title": "Material",
	"tags": [],
	"description": "",
	"content": " Laptops Bring a laptop to the class every week if you have one. We encourage students to work collaboratively, so we would like to have at least one laptop for every 2 or 3 students. Since the homeworks and the project are the work of a team, we encourage you to team-up with students that possess a laptop. In the case you plan to buy a laptop, remember that the students from Swiss Universities have preferential prices via the Neptun Projekt or the EPFL\u0026rsquo;s Poseidon.\nYou do not need to buy a laptop if you do not possess one.\n Textbooks This class is based on the online textbook:\n Required: An Introduction to Statistical Programming Methods with R  This document is under development and it is therefore preferable to always access the text online to be sure you are using the most up-to-date version. Due to its current development, you may encounter errors ranging from broken code to typos or poorly explained topics. If you do, please let us know! Simply add an issue to the GitHub repository used for this document and we will make the changes as soon as possible. In addition, if you know RMarkdown and are familiar with GitHub, make a pull request and fix an issue yourself, otherwise, if you\u0026rsquo;re not familiar with these tools, they will be explained later on in the book itself.\nThe textbooks below are also recommended and are legally available online for free. The following texts will be heavily referenced:\n Recommended: Advanced R Programming by Hadley Wickham Recommended: R Packages Hadley Wickham by Hadley Wickham Recommended: An Introduction to R by W. N. Venables, D. M. Smith, and the R Core Team Recommended: blogdown: Creating Websites with R Markdown by Yihui Xie, Amber Thomas and Alison Presmanes Hill Recommended: R Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, Garrett Grolemund  The following textbooks are helpful, but not necessary to succeed in the course:\n Supplemental: ggplot2: Elegant Graphics for Data Analysis (2nd Edition - GitHub Only) by Hadley Wickham Supplemental: R for Data Science by Garrett Grolemund and Hadley Wickham Supplemental: The R Inferno by Patrick Burns Supplemental: R Programming for Data Science by Roger D. Peng Supplemental: Seamless R and C++ integration with Rcpp by Dirk Eddelbuettel  We regrouped more references by category in the resources page.\nSoftware All the software we will be using are free for acamedic activities. The course will use and present the R statistical computing language as well as different parts of C++ through Rcpp. The integrated developer environment that we will use to explore R is RStudio IDE made by RStudio Inc.\n"
},
{
	"uri": "/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": " Project Project represents 30 points, so 50% of the final grade. Discover more about the project.\n"
},
{
	"uri": "/project/grading/",
	"title": "Peer grading",
	"tags": [],
	"description": "",
	"content": "In order to grade the other group, please send us your feedback by the 21st of December. Your report should have the following structure:\n Group 1 (x / 27 points):\n Overall quality (x / 3 points)\n Interest and complexity of the subject (x / 3 points)\n Presentation (x / 6 points)\n Screencast (x / 3 points)\n Shiny app (x / 3 points)\n Provided documentation (x / 3 points)\n R package (x / 3 points)\n GitHub repository (x / 3 points)\n  Group 2 (x / 27 points): \u0026hellip;  Give a brief justification (1 or 2 phrases) per subject.\n"
},
{
	"uri": "/syllabus/final/",
	"title": "Convinced?",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": " Resources Getting started with R and Rstudio The CRAN website CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of R and its documentation.\nAn Introduction to R This official and up-to-date tutorial, gives an introduction to the language and how to use R for doing statistical analysis and graphics.\nRStudio RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management.\nRstudio cheat sheets A trove of cheat sheets below to make it easy to learn about and use some of R\u0026rsquo;s most useful packages.\nR packages for data science The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\nOnline learning Coding club\u0026rsquo;s tutorials  Our mission is to create a fun and supportive environment where we develop programming and statistics skills together, using R.\nWe want to replace statistics anxiety and code fear with inspiration and motivation to learn, and here we will share our experience.\n Datacamp\u0026rsquo;s free R tutorial and Try R by Code School Both sites provide interactive lessons that will get you writing real code in minutes. They are a great place to make mistakes and test out new skills. You are told immediately when you go wrong and given a chance to fix your code.\nWriting functions in R This course will teach you the fundamentals of writing functions in R so that, among other things, you can make your code more readable, avoid coding errors, and automate repetitive tasks.\nIntroduction to the tidyverse This is an introduction to the dplyr and ggplot2 packages through exploration and visualization of country data over time. This is a suitable course for people who have no or limited experience in R and are interested in learning to perform data analysis.\nData visualisation with ggplot2 Covers the basics of ggplot2. Followed by part 2 which covers more advanced topics.\nExploratory data analysis in R: a case study This course brings ggplot2 and dplyr into action in an in-depth analysis of United Nations voting data. The course also introduces broom for tidying model output and the tidyr package for wrangling data into an explorable shape.\nBooks Advanced R  The book is designed primarily for R users who want to improve their programming skills and understanding of the language. It should also be useful for programmers coming to R from other languages, as it explains some of R’s quirks and shows how some parts that seem horrible do have a positive side.  Hadley Wickham \n R for Data Science  This book will teach you how to do data science with R: You\u0026rsquo;ll learn how to get your data into R, get it into the most useful structure, transform it, visualise it and model it. In this book, you will find a practicum of skills for data science.  Garrett Grolemund and Hadley Wickham \n Misc Easy web applications in R Shiny is an open source R package that provides an elegant and powerful web framework for building web applications using R. Shiny helps you turn your analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge.\nRcpp for Seamless R and C++ Integration The Rcpp package has become the most widely used language extension for R, the powerful environment and language for computing with data. As of May 2017, 1026 packages on CRAN and a further 91 on BioConductor deploy Rcpp to extend R, to accelerate computations and to connect to other C++ projects.\n"
},
{
	"uri": "/project/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "Please visit this repo for presentation example and this repo for R package.\n"
},
{
	"uri": "/",
	"title": "Programming tools in data science",
	"tags": [],
	"description": "",
	"content": " Programming tools in data science Website under construction. New updates coming soon (last update 2019-09-17)\n Before the second lecture (2019-09-24) please do not forget to register your group by following steps of this page.\n The objective of the website is to provide a support for Programming tools in data science given at the Faculty of Business and Economics (HEC Lausanne) of the University of Lausanne in Fall 2019. This course is intended to provide an introduction to programming using the R language. It will also provide students with notions of data management, manipulation and analysis as well as of reproducible research, result-sharing and version control (using GitHub). At the end of the class, student should be able to construct their own R package, make it available on GitHub, document it using literate programming and render it visible by making a website.\nThis class is based on the textbook: \u0026ldquo;An Introduction to Statistical Programming Methods with R\u0026rdquo; , which is available here: http://r.smac-group.com. This document is under development and it is therefore preferable to always access the text online to be sure you are using the most up-to-date version.\nBefore the first lecture (2019-09-17) we strongly advise the students to read and follow instructions of this page.\n "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]